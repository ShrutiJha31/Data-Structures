class Solution {
public:
    map<int,vector<int>>adj;

    unordered_map<int,int>paint,vis;
    bool dfs(int root)
    {
        vis[root]=1;
       for(auto itr:adj[root])
        {
            if(vis[itr]==1)
            {
                if(paint[itr]!=(paint[root]^1))
                    return false;
            }
           else
           {
               paint[itr]=paint[root]^1;
              dfs(itr);
           }
        }
        return true;
    }
    
    bool isBipartite(vector<vector<int>>& graph) {
        for(int i=0;i<graph.size();i++)
        {
            for(auto itr:graph[i])
                adj[i].push_back(itr);
        }
        paint[0]=1;bool flag=false;
    for(int i=0;i<graph.size();i++)
    {
            flag=dfs(i);
            if(flag==false)
                return false;
        
    }
        return true;
    }
};
