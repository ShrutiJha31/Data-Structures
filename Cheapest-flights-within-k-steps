class Solution {
public:
    unordered_map<int,int>vis;
    unordered_map<int,vector<pair<int,int>>>adj;
    void dfs(int src,int des,int k,int &ans,int temp)
    {
        if(k<-1)
            return;
        if(src==des)
        {
            ans=min(temp,ans);
            cout<<"ans"<<ans<<endl;
            return;
        }
        vis[src]=1;
        for(auto itr:adj[src])
        {
            if(vis[itr.first]!=1&&ans>=temp+itr.second)
            {
               cout<<itr.first<<" "<<temp+itr.second<<endl;
                dfs(itr.first,des,k-1,ans,temp+itr.second);
            }
        }
        vis[src]=0;
    }
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        cout.tie(NULL);
        for(int i=0;i<flights.size();i++)
        {
        adj[flights[i][0]].push_back({flights[i][1],flights[i][2]});    
        }
        int ans=INT_MAX;
        int temp=0;
        dfs(src,dst,k,ans,temp);
        if(ans==INT_MAX)
            return -1;
        return ans;
    }
    
};
